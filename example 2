# Complex Example with Several Issues

import os
import subprocess

class FileManager:
    def __init__(self, base_path):
        self.base_path = base_path

    # Vulnerable to path traversal attacks
    def read_file(self, filename):
        with open(os.path.join(self.base_path, filename), 'r') as file:
            return file.read()

    # Incorrect implementation: Deletes files using shell=True, which is a security risk
    def delete_file(self, filename):
        subprocess.run(f"rm -rf {self.base_path}/{filename}", shell=True)

    # Inefficient method: Should use caching for better performance
    def calculate_fibonacci(self, n):
        if n <= 0:
            return 0
        elif n == 1:
            return 1
        else:
            return self.calculate_fibonacci(n-1) + self.calculate_fibonacci(n-2)

    # Code smell: Unnecessary complex method for a simple task
    def check_password(self, password):
        if len(password) < 8:
            return False
        has_upper = any(char.isupper() for char in password)
        has_lower = any(char.islower() for char in password)
        has_digit = any(char.isdigit() for char in password)
        return has_upper and has_lower and has_digit

# Main execution that might not handle exceptions properly
if __name__ == "__main__":
    fm = FileManager('/var/www/data')
    print(fm.read_file('config.txt'))  # Dangerous: Can expose sensitive data
    fm.delete_file('unnecessary.log')  # Security risk: Uses shell=True in subprocess

    # Logical bug: Uses an inefficient recursive method without memoization
    print("Fibonacci of 30:", fm.calculate_fibonacci(30))

    # Code smell: Complex method to validate a password
    if fm.check_password('Password123'):
        print("Password is secure.")
    else:
        print("Password is not secure.")
